<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--        声明组件扫描器-->
    <context:component-scan base-package="controller"/>
<!--    声明视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<!--        前缀:视图文件的路径-->
        <property name="prefix" value="/WEB-INF/view/"/>
<!--        后缀:试图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <mvc:annotation-driven/>
<!--
    第一种处理静态资源的方式
        在Spring-MVC.xml配置文件加入<mvc:default-servlet-handler/>
        原理：在加入这个标签后，框架会创建控制器对象DefaultServletHttpRequestHandler（类似我们的controller）
        DefaultServletHttpRequestHandler这个对象可以把接收的请求转发给tomcat的DefaultServlet

        <mvc:default-servlet-handler/>和@RequestMapping有冲突导致所有资源都交给tomcat的默认Servlet处理
        需要加入<mvc:annotation-driven/>注解驱动器去处理
-->
<!--    <mvc:default-servlet-handler/>-->
<!--
    第二种处理静态资源的方式
    <mvc:resources mapping="" location=""/>
    加入框架后会创建ResourceHttpRequestHandler处理器对象
    让这个对象处理静态资源文件，不依赖tomcat服务器的默认Servlet
    mapping：访问静态资源的uri地址 使用通配符 **
    location：静态资源在你项目中的目录位置

    img/**的文件在/img下找
    resources和@RequestMapping也有冲突 需要加入注解驱动
-->
    <mvc:resources mapping="/img/**" location="/img/"/>

</beans>